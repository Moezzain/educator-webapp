{"version":3,"sources":["config/apiConfig.js","API/apiEducator.js","stateManagement/context.js","components/CardContainer.js","API/apiAuth.js","views/LoginView.js","helpers/Converters.js","components/MyNav.js","components/Footer.js","components/Chat.js","views/ShowPatientsView.js","App.js","serviceWorker.js","index.js","assets/ithnain.png"],"names":["apiUrl","getEducatorIds","a","fetch","url","then","res","json","data","educators","forEach","educator","JSON","parse","name","id","catch","err","console","log","getEducatorChats","i","getChats","chats","count","length","educatorId","error","map","item","e","DataContext","React","createContext","DataProvider","props","saveData","appointments","setState","loading","setEducatorId","state","setChats","test","patientName","Provider","value","this","children","Component","Consumer","CardContainer","Card","style","width","flexDirection","direction","backgroundColor","padding","marginBottom","marginB","marginTop","marginT","borderRadius","login","username","password","text","sha256","encryptedPassword","axios","post","getMessages","get","timeout","result","Login","handleChang","target","onSubmit","context","history","push","Container","fluid","display","justifyContent","alignItems","height","Row","Col","sm","lg","src","logo","Form","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","onClick","contextType","parseArray","arr","element","MyNav","useContext","Navbar","bg","collapseOnSelect","expand","Brand","alt","className","Toggle","aria-controls","Collapse","Object","keys","Nav","Link","key","color","Spinner","animation","to","Footer","imgTypes","fileTypes","audioTypes","Chat","messages","messagesEnd","createRef","scrollToBottom","scrollIntoView","behavior","chatId","parsedMessages","formatMessages","formatedMessages","message","parseInt","user","_id","media","fileNameArr","split","fileExtension","isImg","includes","isFile","isAudio","image","file","replace","audio","createdOn","formattedMessage","Message","previousState","append","dateObject","date","Date","getHours","getMinutes","getMonth","getDate","container","colors","styles","senderBubble","senderContainer","receiverBubble","receiverContainer","bubble","href","getTimeStamp","paddingLeft","paddingRight","marginLeft","marginRight","maxHeight","overflowY","isTyping","is_typing","hasInputField","showSenderName","bubblesCentered","chatBubble","ChatBubble","bind","float","clear","ref","el","ShowPatientsView","showPatient","goBack","paths","chat","medicalProfile","years","age","weight","hba1c","medications","notes","disease","sex","whoIsPatient","surgery","otherDiseases","haveTakenDiet","Tab","Pane","eventKey","fontSize","overflowX","as","column","ListGroup","Item","renderPatientsList","Content","renderPatientInfo","renderChat","App","exact","path","component","LoginView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a754cc61.chunk.js","sourcesContent":["let apiUrl = 'http://api.ithnain.com'\r\n// let apiUrl = 'http://cors-anywhere.herokuapp.com/https://ithnain-test-backend.herokuapp.com'\r\n// let apiUrl= 'http://localhost:3001'\r\n// const expressPort = 3000\r\n// const apiUrls = {\r\n//   production: 'Production URL',\r\n//   development: `http://localhost:${expressPort}`\r\n// }\r\n\r\n// if (window.location.hostname === 'localhost') {\r\n//   apiUrl = apiUrls.development\r\n// } else {\r\n//   apiUrl = apiUrls.production\r\n// }\r\n\r\nexport default apiUrl","import url from '../config/apiConfig'\r\n\r\n\r\nexport  const getEducatorIds= async () => {\r\n    return await fetch(`${url}/educator?get=all`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            let educators = {}\r\n            data.forEach((educator) => {\r\n                let { name, id } = JSON.parse(educator)\r\n                educators[id]= { name, id }\r\n            })\r\n            return educators;\r\n        })\r\n        .catch(err => console.log('error getting ids: ', err)\r\n        )\r\n}\r\n\r\nexport const getEducatorChats= async () => {\r\n    const educators = await getEducatorIds();\r\n\r\n    for (var i in educators) {\r\n        let chats = await getChats(educators[i].id)\r\n        if (chats) {\r\n            educators[i].chats = chats\r\n            educators[i].count = chats.length\r\n        }\r\n    }\r\n    console.log(educators);\r\n    \r\n    return educators;\r\n}\r\n\r\nexport const getChats= async (educatorId) => {\r\n    return await fetch(`${url}/chat?educatorId=${educatorId}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.error) {\r\n                return;\r\n            }\r\n            let chats = data.map((item) => JSON.parse(item))\r\n            return chats\r\n\r\n        }).catch(e => console.log(e))\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { getEducatorChats } from '../API/apiEducator'\r\n\r\nconst DataContext = React.createContext();\r\nclass DataProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      test: \"contex works\",\r\n      educatorId: '',\r\n      loading: false,\r\n      appointments: [],\r\n      educators: {},\r\n      chats: [\r\n        { id: 1, patientName: 'w' }\r\n      ]\r\n    };\r\n  }\r\n\r\n  saveData = (educatorId, appointments, chats) => {\r\n    this.setState({ educatorId, appointments, chats })\r\n    if (educatorId == '8bd3c7e1-c6ec-48bf-8ac8-80bf1f013eef')\r\n      this.getEducatorChats();\r\n\r\n  }\r\n\r\n  getEducatorChats = async () => {\r\n    this.setState({ loading: true })\r\n    let educators = await getEducatorChats();\r\n    if (educators) {\r\n      this.setState({ educators, loading: false })\r\n      return educators\r\n    }\r\n    else {\r\n      this.setState({ loading: false })\r\n    }\r\n  }\r\n\r\n  setEducatorId = educatorId => {\r\n    this.setState({\r\n      educatorId,\r\n      chats: this.state.educators[educatorId].chats\r\n    })\r\n\r\n  }\r\n  setChats = chats => this.setState({ chats })\r\n\r\n  render() {\r\n\r\n    return (\r\n      <DataContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          saveData: this.saveData,\r\n          getEducatorChats: this.getEducatorChats,\r\n          setEducatorId: this.setEducatorId,\r\n          setChats: this.setChats,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </DataContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst DataConsumer = DataContext.Consumer;\r\n\r\nexport { DataProvider, DataConsumer, DataContext };\r\n\r\n","import React, { Component } from \"react\";\r\nimport {Card,} from 'react-bootstrap'\r\n\r\nclass CardContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Card  style={{ width: this.props.width, \r\n       \r\n    //   padding: \"2%\",\r\n     flexDirection: this.props.direction,\r\n      backgroundColor: \"rgba(247,247,247,1)\",\r\n      padding: this.props.padding,\r\n      marginBottom: this.props.marginB,\r\n      marginTop: this.props.marginT,\r\n      borderRadius: 25\r\n    //   boxShadow: '1px 3px 5px rgba(255,255,255,0.9)' \r\n      }}>\r\n            {this.props.children}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardContainer;\r\n","import axios from \"axios\"\r\nimport apiUrl from '../config/apiConfig'\r\nimport { sha256 } from 'js-sha256';\r\n\r\nconst encrypt = (text) => {\r\n    return sha256(text);\r\n}\r\n\r\nexport const login = async ({ username, password }) => {\r\n    let encryptedPassword = await encrypt(password);\r\n    \r\n    const data = {\r\n        id: username,\r\n        password: encryptedPassword\r\n    }\r\n    return axios.post(`${apiUrl}/login`, data)\r\n}\r\n\r\nexport const getMessages = async id => {\r\n    try {\r\n        let result = await axios\r\n            .get(`${apiUrl}/message?chatId=${id}`, { timeout: 10000 })\r\n        return result;\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}","import React from \"react\";\r\nimport { Button, Form, Row, Col, Container } from \"react-bootstrap\";\r\nimport CardContainer from \"../components/CardContainer\";\r\nimport logo from \"../assets/ithnain.png\";\r\nimport {login} from '../API/apiAuth'\r\nimport {DataContext} from '../stateManagement/context'\r\n\r\nclass Login extends React.Component {\r\n\r\n    static contextType = DataContext;\r\n\r\n\r\n    state ={\r\n        username: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    handleChang = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = () => {\r\n        \r\n        login(this.state)\r\n        .then(res => {\r\n            \r\n            this.context.saveData(res.data.educatorId, res.data.appointments, res.data.chats)\r\n            this.props.history.push(\"showpatients\")\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n\r\n  render() {\r\n      const {username, password} = this.state;\r\n    return (\r\n      <Container\r\n        fluid\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"100vh\",\r\n          backgroundColor: \"#0a122a\"\r\n        }}\r\n      >\r\n        <Row>\r\n          <Col\r\n            sm={12}\r\n            lg={4}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <img src={logo} style={{ width: \"50%\", marginBottom: \"4%\" }} />\r\n          </Col>\r\n          <Col\r\n            sm={12}\r\n            lg={6}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n            }}\r\n          >\r\n            <CardContainer width=\"80%\" padding={30}>\r\n              <Form style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control \r\n                  type=\"text\" \r\n                  placeholder=\"Enter username\"\r\n                  value={username}\r\n                  name={\"username\"}\r\n                  onChange={(e) => this.handleChang(e)}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control \r\n                  type=\"password\" \r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  name={\"password\"}\r\n                  onChange={(e) => this.handleChang(e)}\r\n                  />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" onClick={this.onSubmit}>\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </CardContainer>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","export function parseArray(arr){\r\n    return arr.map((element) => { return JSON.parse(element) })\r\n}\r\n\r\nexport function parseObjectOfArrays(obj){\r\n    let parsed=[]\r\n    let objects={}\r\n    for(var key in obj){\r\n        var current=obj[key]\r\n        objects[key]= parseArray(current)\r\n        parsed.push(parseArray(current))\r\n    }\r\n    return objects\r\n}","import React, { Component, useContext } from \"react\";\r\nimport logo from '../assets/ithnain.png'\r\nimport { Navbar, Spinner, Nav } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport {DataContext} from '../stateManagement/context'\r\n\r\nconst MyNav = (props) => {\r\n\r\n  const {educators, setEducatorId, loading}= useContext(DataContext)\r\n\r\n  return (\r\n    <Navbar bg=\"secondary\" variant=\"dark\" collapseOnSelect expand=\"lg\">\r\n      <Navbar.Brand >\r\n        <img\r\n          alt=\"\"\r\n          src={logo}\r\n          width=\"80\"\r\n          height=\"40\"\r\n          className=\"d-inline-block align-top\"\r\n        />{\" \"}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        {Object.keys(educators).length ?\r\n          Object.keys(educators).map((i) => (\r\n            <Nav.Link key={educators[i].id} ><Link style={{ color: \"#FFF\" }} onClick={()=>setEducatorId(educators[i].id)} >{educators[i].name}</Link> </Nav.Link>\r\n          ))\r\n          : loading? \r\n          <Spinner animation=\"border\" />\r\n          : <Nav className=\"mr-auto\">\r\n            <Nav.Link ><Link style={{ color: \"#FFF\" }} to=\"/\">Home</Link> </Nav.Link>\r\n            <Nav.Link ><Link style={{ color: \"#FFF\" }} to=\"/showpatients\">Login</Link></Nav.Link>\r\n          </Nav>\r\n        }\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n\r\n}\r\n\r\nexport default MyNav;\r\n","import React from \"react\";\r\nimport logo from \"../assets/ithnain.png\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Navbar\r\n      bg=\"secondary\"\r\n      variant=\"dark\"\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        \r\n      }}\r\n    >\r\n      <img\r\n        alt=\"\"\r\n        src={logo}\r\n        width=\"100\"\r\n        height=\"50\"\r\n        className=\"d-inline-block align-top\"\r\n      />\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { GiftedChat } from 'react-gifted-chat';\r\nimport { ChatFeed, Message, ChatBubble } from 'react-chat-ui'\r\nimport { Container, Spinner } from 'react-bootstrap'\r\nimport { getMessages } from '../API/apiAuth'\r\n\r\nconst imgTypes = ['png', 'jpg', 'jpeg', 'gif'];\r\nconst fileTypes = ['pdf', 'doc', 'docx'];\r\nconst audioTypes = ['mp3', '3gp', 'caf', 'wav', 'wave', 'm4a'];\r\n\r\nclass Chat extends React.Component {\r\n\r\n    state = {\r\n        messages: [],\r\n    };\r\n\r\n    messagesEnd = React.createRef();\r\n    async componentDidMount() {\r\n        // this.setState({\r\n        //     messages: [\r\n        //         new Message({\r\n        //             id: 1,\r\n        //             message: \"I'm the recipient! (The person you're talking to)\",\r\n        //         }), // Gray bubble\r\n        //         new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\r\n        //         new Message({\r\n        //             id: 1,\r\n        //             message: \"I'm the recipient! (The person you're talking to)\",\r\n        //         }), // Gray bubble\r\n        //         new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\r\n        //         new Message({\r\n        //             id: 1,\r\n        //             message: \"I'm the recipient! (The person you're talking to)\",\r\n        //         }), // Gray bubble\r\n        //         new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\r\n        //         new Message({\r\n        //             id: 1,\r\n        //             message: \"I'm the recipient! (The person you're talking to)\",\r\n        //         }), // Gray bubble\r\n        //         new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\r\n        //         new Message({\r\n        //             id: 1,\r\n        //             message: \"I'm the recipient! (The person you're talking to)\",\r\n        //         }), // Gray bubble\r\n        //         new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\r\n        //     ],\r\n        // });\r\n\r\n        let chatId = '1234'\r\n        this.setState({ loading: true })\r\n        await getMessages(this.props.chatId)\r\n            .then(({ data }) => {\r\n                if (data) {\r\n                    let parsedMessages = data.map((element) => { return JSON.parse(element) })\r\n                    // return parsedMessages\r\n                    let messages = this.formatMessages(parsedMessages)\r\n                    this.setState({ messages, loading: false })\r\n                    // this.scrollToBottom()\r\n                }\r\n                else {\r\n                    this.setState({ loading: false })\r\n                    return []\r\n                }\r\n            }).catch(err => {\r\n                this.setState({ loading: false })\r\n                console.log(\"ERROR GETTING MESSAGES\", err)\r\n            })\r\n\r\n    }\r\n\r\n    formatMessages(messages = []) {\r\n        let formatedMessages = []\r\n        for (var i in messages) {\r\n            let message = messages[i];\r\n            let id = parseInt(message.user._id) - 1;\r\n            if (message.media) {\r\n                var fileNameArr = message.media.split('.');\r\n                var fileExtension = fileNameArr[fileNameArr.length - 1];\r\n                var isImg = imgTypes.includes(fileExtension);\r\n                var isFile = fileTypes.includes(fileExtension);\r\n                var isAudio = audioTypes.includes(fileExtension);\r\n                if (isImg) {\r\n                    message.message = { image: message.media };\r\n                    delete message.media;\r\n                } else if (isFile) {\r\n                    message.message = { text: message.text, file: message.media };\r\n                    delete message.media;\r\n                } else if (isAudio) {\r\n                    message.media = message.media.replace('vnd.wave', 'wav');\r\n                    message.message = { audio: message.media };\r\n                    delete message.media;\r\n                }\r\n                else {\r\n                    message.message = { text: '', }\r\n                }\r\n            } else if (message.text) {\r\n                message.message = { text: message.text }\r\n            }\r\n            else {\r\n                message.message = { text: '', }\r\n            }\r\n            message.message.createdOn = message.createdOn\r\n            let formattedMessage = new Message({ id, message: message.message })\r\n\r\n            formatedMessages.push(formattedMessage)\r\n        }\r\n        return formatedMessages;\r\n    }\r\n\r\n\r\n    onSend(messages = []) {\r\n        this.setState((previousState) => ({\r\n            messages: previousState.messages.append(messages),\r\n        }));\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    getTimeStamp(dateObject) {\r\n        let date = new Date(dateObject)\r\n        return `${date.getHours()}:${date.getMinutes()} - ${date.getMonth() + 1}/${date.getDate()}`\r\n    }\r\n    bubble(props) {\r\n        let { message } = props;\r\n        let container, colors;\r\n        if (message.id == 0) {\r\n            colors = styles.senderBubble;\r\n            container = styles.senderContainer;\r\n        } else {\r\n            colors = styles.receiverBubble;\r\n            container = styles.receiverContainer;\r\n        }\r\n        if (!message.message)\r\n            return null;\r\n\r\n        return (\r\n            // <ChatBubble message={new Message({id: 1, message:'hi'})} />\r\n            <div style={container}>\r\n                <div style={{ ...styles.bubble, ...colors }}>\r\n                    {\r\n                        message.message.image ? (\r\n                            <img src={message.message.image} />\r\n                        ) : message.message.file ? (\r\n                            <a href={message.message.file} target=\"_blank\">{message.message.text}</a>\r\n                        ) : message.message.text ? (\r\n                            message.message.text\r\n                            // null\r\n                        ) : null}\r\n                    <br />\r\n                    {this.getTimeStamp(message.message.createdOn)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        const { loading, messages } = this.state;\r\n\r\n        return (\r\n            <div style={{ paddingLeft: 0, paddingRight: 0, marginLeft: 0, marginRight: 0, width: '100vh', maxHeight: '80vh', overflowY: 'auto' }}>\r\n                {loading ?\r\n                    <Spinner animation=\"border\" />\r\n                    :\r\n                    !messages.length ?\r\n                        <div>المحادثة فارغة </div>\r\n                        : null\r\n                }\r\n                <ChatFeed\r\n                    messages={messages} // Boolean: list of message objects\r\n                    isTyping={this.state.is_typing} // Boolean: is the recipient typing\r\n                    hasInputField={false} // Boolean: use our input, or use your own\r\n                    showSenderName // show the name of the user who sent the message\r\n                    bubblesCentered={false} //Boolean should the bubbles be centered in the feed?\r\n                    chatBubble={ChatBubble}\r\n                    chatBubble={this.bubble.bind(this)}\r\n                />\r\n                <div style={{ float: \"left\", clear: \"both\" }}\r\n                    ref={(el) => { this.messagesEnd = el; }} />\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Chat\r\n\r\nconst styles = {\r\n    bubble: {\r\n        borderRadius: 15,\r\n        padding: 20,\r\n        backgroundColor: \"#3680E5\",\r\n        display: \"inline-block\",\r\n        color: \"white\"\r\n    },\r\n    senderBubble: {\r\n        backgroundColor: \"#3680E5\",\r\n        color: \"white\",\r\n    },\r\n    receiverBubble: {\r\n        backgroundColor: \"#D8D8D8\",\r\n        color: \"black\",\r\n    },\r\n    senderContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n        marginBottom: 5,\r\n    },\r\n    receiverContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        marginBottom: 5,\r\n    },\r\n    // timestamp: {\r\n    //     margin: 0,\r\n    //     color: '#ccc',\r\n    //     fontSize: 11\r\n    // }\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  ListGroup,\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Tab,\r\n  Nav\r\n} from \"react-bootstrap\";\r\nimport CardContainer from \"../components/CardContainer\";\r\nimport logo from \"../assets/ithnain.png\";\r\nimport { login } from \"../API/apiAuth\";\r\nimport { DataContext } from \"../stateManagement/context\";\r\nimport { parseArray } from \"../helpers/Converters\";\r\nimport MyNav from \"../components/MyNav\";\r\nimport Footer from \"../components/Footer\";\r\nimport Chat from '../components/Chat';\r\n\r\nclass ShowPatientsView extends React.Component {\r\n  static contextType = DataContext;\r\n\r\n  state = {\r\n    username: \"\",\r\n    password: \"\",\r\n    showPatient: false,\r\n  };\r\n\r\n  componentWillMount() {\r\n    if (this.context.educatorId == \"\") {\r\n      this.props.history.goBack();\r\n      // console.log(this.props)\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    let { chats, educators } = this.context\r\n    if (!this.context.chats[0].id) {\r\n      chats = parseArray(this.context.chats);\r\n      this.context.setChats(chats)\r\n    }\r\n\r\n    let paths = []\r\n    for (var i in educators) {\r\n      let educator = educators[i]\r\n      paths.push({})\r\n    }\r\n  }\r\n\r\n\r\n  renderPatientInfo() {\r\n\r\n    let { chats } = this.context;\r\n\r\n    if (!chats) {\r\n      return null\r\n    }\r\n    return chats.map(chat => {\r\n      if (!chat.medicalProfile) {\r\n        return null\r\n      }\r\n      let { years,\r\n        age,\r\n        weight,\r\n        height,\r\n        hba1c,\r\n        medications,\r\n        patientName,\r\n        notes,\r\n        disease,\r\n        sex,\r\n        whoIsPatient,\r\n        surgery,\r\n        otherDiseases,\r\n        haveTakenDiet,\r\n         } = chat.medicalProfile\r\n      return (\r\n        <Tab.Pane key={chat.id} eventKey={chat.id}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              flexDirection: \"column\"\r\n            }}\r\n          >\r\n\r\n            <a style={{ color: '#3581b8', fontSize: 26 }} onClick={() => this.setState({ showPatient: false })}>فتح المحادثة</a>\r\n\r\n            <h3>{chat.id}</h3>\r\n\r\n            <Form style={{ width: '100vh', maxHeight: '80vh', overflowY: 'auto', overflowX: 'hidden' }}>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    disease\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={disease} />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    years\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={years} />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    Hba1C\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={hba1c} />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    age\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={age} />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    sex\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={sex} />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    Patient Type\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={whoIsPatient} />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    medications\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={medications} />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    otherDiseases\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={otherDiseases} />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    Weight\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={weight} />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    Height\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={height} />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label column sm=\"10\">\r\n                    Diet Taken\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={haveTakenDiet} />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row}>\r\n                  <Form.Label column sm=\"10\">\r\n                    Past Surgeries\r\n              </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" value={surgery} />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form.Row>\r\n              <Form.Group as={Row}>\r\n                <Form.Label column sm=\"10\">\r\n                  Notes\r\n              </Form.Label>\r\n                <Col sm=\"10\">\r\n                  <Form.Control type=\"textarea\" value={notes} />\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n\r\n          </div>\r\n        </Tab.Pane>\r\n      );\r\n    });\r\n\r\n  }\r\n  renderChat() {\r\n    let { chats } = this.context;\r\n    if (!chats) {\r\n      return null\r\n    }\r\n    return chats.map(chat => {\r\n      return (\r\n        <Tab.Pane key={chat.id} eventKey={chat.id}>\r\n          <div>\r\n            <a style={{ color: '#3581b8' }} onClick={() => this.setState({ showPatient: true })}>مشاهدة البروفايل</a>\r\n          </div>\r\n          <Chat chatId={chat.id} />\r\n        </Tab.Pane>\r\n      )\r\n    })\r\n  }\r\n\r\n  renderPatientsList() {\r\n    const { chats } = this.context;\r\n    if (!chats) {\r\n      return null\r\n    }\r\n    return chats.map(chat => {\r\n      return (\r\n        <ListGroup.Item key={chat.id} eventKey={chat.id}>\r\n          {chat.patientName}\r\n        </ListGroup.Item>\r\n\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <MyNav />\r\n        <Container\r\n          fluid\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            height: \"100vh\",\r\n            backgroundColor: \"#0a122a\"\r\n          }}\r\n        >\r\n          <CardContainer width=\"80%\" direction=\"row\" padding={10} marginT={40} marginB={40}>\r\n            <Tab.Container id=\"left-tabs-example\" >\r\n              <div className=\"left-col\">\r\n                <ListGroup >{this.renderPatientsList()}</ListGroup>\r\n              </div>\r\n\r\n              <div className=\"right-col\">\r\n                <Tab.Content>\r\n                  {this.state.showPatient ?\r\n                    this.renderPatientInfo()\r\n                    : this.renderChat()\r\n                  }\r\n                </Tab.Content>\r\n              </div>\r\n            </Tab.Container>\r\n          </CardContainer>\r\n        </Container>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowPatientsView;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './scss/app.scss'\r\nimport {DataProvider} from './stateManagement/context'\r\nimport {BrowserRouter as Router, Route, Link, Switch} from 'react-router-dom'\r\nimport LoginView from './views/LoginView'\r\nimport ShowPatientsView from './views/ShowPatientsView'\r\nimport MyNav from './components/MyNav'\r\nimport { Container } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n  return (\r\n    <DataProvider>\r\n      <Router>\r\n       \r\n\r\n     \r\n      \r\n        <Switch>\r\n        <Route exact path=\"/\" component={LoginView} />\r\n        {/* <Route exact path=\"/\" component={ShowPatientsView} /> */}\r\n        <Route exact path=\"/showpatients\" component={ShowPatientsView} />\r\n        </Switch>\r\n      </Router>\r\n   \r\n    </DataProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/ithnain.287167eb.png\";"],"sourceRoot":""}